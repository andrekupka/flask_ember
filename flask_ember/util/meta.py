def get_class_attributes(cls, predicate=None):
    return [(name, attr) for name, attr in cls.__dict__.items()
            if (predicate(name, attr) if predicate else True)]


def get_inherited_attributes(cls, predicate):
    return get_attributes(cls, predicate, exclude_self=True)


def get_attributes(cls, predicate=None, exclude_self=False):
    """Returns all attributes from the given instance (and its base classes)
    that match the given prediate. If no predicate is given all attributes are
    returned. If exclude_self is set to True attributes from the class itself
    are excluded from the result.

    :param instance: the instance to fetch attributes from
    :param predicate: the prediate an attribute must fulfill
    :type predicate: function(name, attr)
    :param explude_self: whether to exclude the class itself and only consider
        parents
    :type exclude_self: bool
    :rtype: list
    """
    mro = cls.mro()[::-1]
    if exclude_self:
        mro = mro[:-1]

    attrs = list()
    for base in mro:
        attrs.extend(get_class_attributes(base, predicate))
    return attrs


def has_attribute(bases, attrs, name):
    """Returns whether a class that is generated by a metaclass will have an
    attribute with the given name.

    :param bases: the base classes of the generated class
    :type bases: tuple
    :param attrs: the attributes of the generated class
    :type attrs: dict
    :param name: the name of the desired attribute
    :type name: str
    :rtype: bool
    """
    if name in attrs:
        return True
    for base in bases:
        if hasattr(base, name):
            return True
    return False
